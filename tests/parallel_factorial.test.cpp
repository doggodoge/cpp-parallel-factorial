#include <gtest/gtest.h>
#include <parallel_factorial.h>
#include <thread>
#include <vector>

TEST(ParallelFactorial, HandlesZero) { ASSERT_EQ(parallel_factorial(0), "1"); }

TEST(ParallelFactorial, HandlesPositiveUnderThreadCount) {
  std::string correct_answers_up_to_6[] = {"1", "2", "6", "24", "120", "720"};
  auto num_of_processors = std::thread::hardware_concurrency();
  if (num_of_processors > 6) {
    num_of_processors = 6;
  }
  for (auto i = 0; i < num_of_processors; i++) {
    ASSERT_EQ(parallel_factorial(i + 1), correct_answers_up_to_6[i]);
  }
}

TEST(ParallelFactorial, HandlesPositiveOverThreadCount) {
  auto const expected_for_500 =
      "122013682599111006870123878542304692625357434280319284219241358838584537"
      "315388199760549644750220328186301361647714820358416337872207817720048078"
      "520515932928547790757193933060377296085908627042917454788242491272634430"
      "567017327076946106280231045264421887878946575477714986349436778103764427"
      "403382736539747138647787849543848959553753799042324106127132698432774571"
      "554630997720278101456108118837370953101635632443298702956389662891165897"
      "476957208792692887128178007026517450776841071962439039432253642260523494"
      "585012991857150124870696156814162535905669342381300885624924689156412677"
      "565448188650659384795177536089400574523894033579847636394490531306232374"
      "906644504882466507594673586207463792518420045936969298102226397195259719"
      "094521782333175693458150855233282076282002340262690789834245171200620771"
      "464097945611612762914595123722991334016955236385094288559201872743379517"
      "301458635757082835578015873543276888868012039988238470215146760544540766"
      "353598417443048012893831389688163948746965881750450692636533817505547812"
      "864000000000000000000000000000000000000000000000000000000000000000000000"
      "0000000000000000000000000000000000000000000000000000000";
  auto const expected_for_1000 =
      "402387260077093773543702433923003985719374864210714632543799910429938512"
      "398629020592044208486969404800479988610197196058631666872994808558901323"
      "829669944590997424504087073759918823627727188732519779505950995276120874"
      "975462497043601418278094646496291056393887437886487337119181045825783647"
      "849977012476632889835955735432513185323958463075557409114262417474349347"
      "553428646576611667797396668820291207379143853719588249808126867838374559"
      "731746136085379534524221586593201928090878297308431392844403281231558611"
      "036976801357304216168747609675871348312025478589320767169132448426236131"
      "412508780208000261683151027341827977704784635868170164365024153691398281"
      "264810213092761244896359928705114964975419909342221566832572080821333186"
      "116811553615836546984046708975602900950537616475847728421889679646244945"
      "160765353408198901385442487984959953319101723355556602139450399736280750"
      "137837615307127761926849034352625200015888535147331611702103968175921510"
      "907788019393178114194545257223865541461062892187960223838971476088506276"
      "862967146674697562911234082439208160153780889893964518263243671616762179"
      "168909779911903754031274622289988005195444414282012187361745992642956581"
      "746628302955570299024324153181617210465832036786906117260158783520751516"
      "284225540265170483304226143974286933061690897968482590125458327168226458"
      "066526769958652682272807075781391858178889652208164348344825993266043367"
      "660176999612831860788386150279465955131156552036093988180612138558600301"
      "435694527224206344631797460594682573103790084024432438465657245014402821"
      "885252470935190620929023136493273497565513958720559654228749774011413346"
      "962715422845862377387538230483865688976461927383814900140767310446640259"
      "899490222221765904339901886018566526485061799702356193897017860040811889"
      "729918311021171229845901641921068884387121855646124960798722908519296819"
      "372388642614839657382291123125024186649353143970137428531926649875337218"
      "940694281434118520158014123344828015051399694290153483077644569099073152"
      "433278288269864602789864321139083506217095002597389863554277196742822248"
      "757586765752344220207573630569498825087968928162753848863396909959826280"
      "956121450994871701244516461260379029309120889086942028510640182154399457"
      "156805941872748998094254742173582401063677404595741785160829230135358081"
      "840096996372524230560855903700624271243416909004153690105933983835777939"
      "410970027753472000000000000000000000000000000000000000000000000000000000"
      "000000000000000000000000000000000000000000000000000000000000000000000000"
      "000000000000000000000000000000000000000000000000000000000000000000000000"
      "000000000000000000000000000000000000000000000000";
  ASSERT_EQ(parallel_factorial(500), expected_for_500);
  ASSERT_EQ(parallel_factorial(1000), expected_for_1000);
}
